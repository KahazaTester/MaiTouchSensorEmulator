<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lbAutoPortConnecting" xml:space="preserve">
    <value>自动连接端口</value>
  </data>
  <data name="lbAutoPortConnectingTT" xml:space="preserve">
    <value>尝试在应用启动时自动连接到COM23以发送触摸传感器更新</value>
  </data>
  <data name="lbAutoSensorPositioning" xml:space="preserve">
    <value>自动传感器窗口定位</value>
  </data>
  <data name="lbAutoSensorPositioningTT" xml:space="preserve">
    <value>尝试自动移动触摸传感器窗口到Sinmai.exe上方的正确位置</value>
  </data>
  <data name="lbButtonState" xml:space="preserve">
    <value>按钮状态</value>
  </data>
  <data name="lbConnectionState" xml:space="preserve">
    <value>连接状态</value>
  </data>
  <data name="lbConnectionStateNotConnected" xml:space="preserve">
    <value>未连接</value>
  </data>
  <data name="lbConnectToPort" xml:space="preserve">
    <value>连接到端口</value>
  </data>
  <data name="lbDebugMode" xml:space="preserve">
    <value>调试模式</value>
  </data>
  <data name="lbExitWithSinmai" xml:space="preserve">
    <value>随Sinmai退出</value>
  </data>
  <data name="lbExitWithSinmaiTT" xml:space="preserve">
    <value>尝试检测Sinmai.exe何时退出，并与之同时退出此应用</value>
  </data>
  <data name="lbInstallComPort" xml:space="preserve">
    <value>安装COM端口</value>
  </data>
  <data name="lbLanguageDropdown" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="lbListComPorts" xml:space="preserve">
    <value>列出已安装的COM端口</value>
  </data>
  <data name="lbMenuCategoryHelp" xml:space="preserve">
    <value>_帮助</value>
  </data>
  <data name="lbMenuItemSetup" xml:space="preserve">
    <value>显示设置说明</value>
  </data>
  <data name="lbRecievedData" xml:space="preserve">
    <value>已接收数据</value>
  </data>
  <data name="lbSentData" xml:space="preserve">
    <value>已发送数据</value>
  </data>
  <data name="LbTouchPanelDrag" xml:space="preserve">
    <value>拖动</value>
  </data>
  <data name="LbTouchPanelResize" xml:space="preserve">
    <value>调整大小</value>
  </data>
  <data name="lbUninstallComPort" xml:space="preserve">
    <value>卸载COM端口</value>
  </data>
  <data name="TxtCom3AlreadyInstalled" xml:space="preserve">
    <value>COM3端口已注册。可通过设备管理器移除，或卸载虚拟端口。</value>
  </data>
  <data name="TxtCom3InstalledSuccessfully" xml:space="preserve">
    <value>COM3端口成功安装。</value>
  </data>
  <data name="TxtCom3InstallFailed" xml:space="preserve">
    <value>COM3端口安装失败</value>
  </data>
  <data name="TxtCom3UninstalledSuccessfully" xml:space="preserve">
    <value>COM3端口成功卸载。</value>
  </data>
  <data name="TxtCom3UninstallFailed" xml:space="preserve">
    <value>COM3端口卸载失败。可能是真实设备，请从设备管理器中卸载</value>
  </data>
  <data name="TxtCom3UninstallNotRequired" xml:space="preserve">
    <value>未找到COM3端口，无需卸载。</value>
  </data>
  <data name="TxtComPortConnected" xml:space="preserve">
    <value>已连接到端口</value>
  </data>
  <data name="TxtComPortConnecting" xml:space="preserve">
    <value>正在连接...</value>
  </data>
  <data name="TxtCurrentlyInstalledPorts" xml:space="preserve">
    <value>已安装端口</value>
  </data>
  <data name="TxtErrorConnectingToPortHeader" xml:space="preserve">
    <value>连接COM端口错误</value>
  </data>
  <data name="TxtFailedToSetupSinmaiExit" xml:space="preserve">
    <value>无法监听Sinmai退出信号，这可能是因为Sinmai.exe以管理员身份运行。\n\n自动退出功能已禁用。</value>
  </data>
  <data name="TxtFailedToSetupSinmaiExitHeader" xml:space="preserve">
    <value>监听Sinmai退出失败</value>
  </data>
  <data name="TxtSetupInstructions" xml:space="preserve">
    <value>请在安装虚拟COM端口之前，移除使用COM3端口的任何COM设备。在设备管理器中点击“查看”，然后启用“显示隐藏的设备”，并卸载任何使用COM3端口的设备。

确保COM3端口空闲后，请使用应用中的安装COM端口按钮来注册应用。

应用需要在打开Sinmai.exe之前连接到端口。</value>
  </data>
  <data name="TxtSetupInstructionsHeader" xml:space="preserve">
    <value>首次设置</value>
  </data>
</root>