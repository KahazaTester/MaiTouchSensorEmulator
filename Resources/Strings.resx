<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lbAutoPortConnecting" xml:space="preserve">
    <value>Automatic port connecting</value>
  </data>
  <data name="lbAutoPortConnectingTT" xml:space="preserve">
    <value>Try to automatically connect to COM23 to send touch sensor updates on app start</value>
  </data>
  <data name="lbAutoSensorPositioning" xml:space="preserve">
    <value>Automatic sensor window positioning</value>
  </data>
  <data name="lbAutoSensorPositioningTT" xml:space="preserve">
    <value>Try and automatically move the touch sensor window into the correct position on top of Sinmai.exe</value>
  </data>
  <data name="lbButtonState" xml:space="preserve">
    <value>Button State</value>
  </data>
  <data name="lbConnectionState" xml:space="preserve">
    <value>Connection state</value>
  </data>
  <data name="lbConnectionStateNotConnected" xml:space="preserve">
    <value>Not connected</value>
  </data>
  <data name="lbConnectToPort" xml:space="preserve">
    <value>Connect to port</value>
  </data>
  <data name="lbDebugMode" xml:space="preserve">
    <value>Debug mode</value>
  </data>
  <data name="lbEmulateRingButtons" xml:space="preserve">
    <value>Emulate ring buttons</value>
  </data>
  <data name="lbEmulateRingButtonsTT" xml:space="preserve">
    <value>Useful when navigating the menus without a keyboard</value>
  </data>
  <data name="lbExitWithSinmai" xml:space="preserve">
    <value>Exit when Sinmai exits</value>
  </data>
  <data name="lbExitWithSinmaiTT" xml:space="preserve">
    <value>Try and detect when Sinmai.exe exits and exit this app alongside it</value>
  </data>
  <data name="lbInstallComPort" xml:space="preserve">
    <value>Install com port</value>
  </data>
  <data name="lbLanguageDropdown" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="lbListComPorts" xml:space="preserve">
    <value>List installed com ports</value>
  </data>
  <data name="lbMenuCategoryHelp" xml:space="preserve">
    <value>_Help</value>
  </data>
  <data name="lbMenuItemSetup" xml:space="preserve">
    <value>Show setup instructions</value>
  </data>
  <data name="lbRecievedData" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="lbSentData" xml:space="preserve">
    <value>Sent</value>
  </data>
  <data name="LbTouchPanelDrag" xml:space="preserve">
    <value>Drag</value>
  </data>
  <data name="LbTouchPanelResize" xml:space="preserve">
    <value>Resize</value>
  </data>
  <data name="lbUninstallComPort" xml:space="preserve">
    <value>Uninstall com port</value>
  </data>
  <data name="TxtCom3AlreadyInstalled" xml:space="preserve">
    <value>Port COM3 already registered. Either remove it via Device Manager or uninstall the virtual port.</value>
  </data>
  <data name="TxtCom3InstalledSuccessfully" xml:space="preserve">
    <value>Port COM3 successfully installed.</value>
  </data>
  <data name="TxtCom3InstallFailed" xml:space="preserve">
    <value>Port COM3 failed to install</value>
  </data>
  <data name="TxtCom3UninstalledSuccessfully" xml:space="preserve">
    <value>Port COM3 successfully uninstalled.</value>
  </data>
  <data name="TxtCom3UninstallFailed" xml:space="preserve">
    <value>Port COM3 failed to uninstall. It may be a real device, uninstall it from Device Manager</value>
  </data>
  <data name="TxtCom3UninstallNotRequired" xml:space="preserve">
    <value>Port COM3 not found. No need to uninstall.</value>
  </data>
  <data name="TxtComPortConnected" xml:space="preserve">
    <value>Connected to port</value>
  </data>
  <data name="TxtComPortConnecting" xml:space="preserve">
    <value>Conecting...</value>
  </data>
  <data name="TxtCurrentlyInstalledPorts" xml:space="preserve">
    <value>Installed ports</value>
  </data>
  <data name="TxtErrorConnectingToPortHeader" xml:space="preserve">
    <value>Error connecting to COM port</value>
  </data>
  <data name="TxtFailedToSetupSinmaiExit" xml:space="preserve">
    <value>Failed to listen for Sinmai exit signal, this can happen when Sinmai.exe is being run as admin.\n\nAutomatic exiting disabled.</value>
  </data>
  <data name="TxtFailedToSetupSinmaiExitHeader" xml:space="preserve">
    <value>Failed to listen for Sinmai exit</value>
  </data>
  <data name="TxtSetupInstructions" xml:space="preserve">
    <value>Please remove any COM devices using the COM3 port before installing the virtual COM port. In Device Manager click "View" then enabled "Show hidden devices" and uninstall any devices that are using the COM3 port.

After ensuring COM3 is free please use the install COM port button in the app to register the app.

The app needs to connect to the port prior to Sinmai.exe being opened.</value>
  </data>
  <data name="TxtSetupInstructionsHeader" xml:space="preserve">
    <value>First time setup</value>
  </data>
</root>